"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Contract = exports.compileCalldata = void 0;
var minimalistic_assert_1 = __importDefault(require("minimalistic-assert"));
var provider_1 = require("./provider");
var number_1 = require("./utils/number");
var stark_1 = require("./utils/stark");
function parseFelt(candidate) {
    try {
        return (0, number_1.toBN)(candidate);
    }
    catch (e) {
        throw Error('Couldnt parse felt');
    }
}
function isFelt(candidate) {
    try {
        parseFelt(candidate);
        return true;
    }
    catch (e) {
        return false;
    }
}
function compileCalldata(args) {
    return Object.values(args).flatMap(function (value) {
        if (Array.isArray(value))
            return __spreadArray([(0, number_1.toBN)(value.length).toString()], __read(value.map(function (x) { return (0, number_1.toBN)(x).toString(); })), false);
        if (typeof value === 'object' && 'type' in value)
            return Object.entries(value)
                .filter(function (_a) {
                var _b = __read(_a, 1), k = _b[0];
                return k !== 'type';
            })
                .map(function (_a) {
                var _b = __read(_a, 2), v = _b[1];
                return (0, number_1.toBN)(v).toString();
            });
        return (0, number_1.toBN)(value).toString();
    });
}
exports.compileCalldata = compileCalldata;
var Contract = /** @class */ (function () {
    /**
     * Contract class to handle contract methods
     *
     * @param abi - Abi of the contract object
     * @param address (optional) - address to connect to
     */
    function Contract(abi, address, provider) {
        if (address === void 0) { address = null; }
        if (provider === void 0) { provider = provider_1.defaultProvider; }
        this.connectedTo = null;
        this.connectedTo = address;
        this.provider = provider;
        this.abi = abi;
        this.structs = abi
            .filter(function (abiEntry) { return abiEntry.type === 'struct'; })
            .reduce(function (acc, abiEntry) {
            var _a;
            return (__assign(__assign({}, acc), (_a = {}, _a[abiEntry.name] = abiEntry, _a)));
        }, {});
    }
    Contract.prototype.connect = function (address) {
        this.connectedTo = address;
        return this;
    };
    Contract.prototype.validateMethodAndArgs = function (type, method, args) {
        if (args === void 0) { args = {}; }
        // ensure provided method exists
        var invokeableFunctionNames = this.abi
            .filter(function (abi) {
            if (abi.type !== 'function')
                return false;
            var isView = abi.stateMutability === 'view';
            return type === 'INVOKE' ? !isView : isView;
        })
            .map(function (abi) { return abi.name; });
        (0, minimalistic_assert_1.default)(invokeableFunctionNames.includes(method), (type === 'INVOKE' ? 'invokeable' : 'viewable') + " method not found in abi");
        // ensure args match abi type
        var methodAbi = this.abi.find(function (abi) { return abi.name === method && abi.type === 'function'; });
        methodAbi.inputs.forEach(function (input) {
            var arg = args[input.name];
            if (arg !== undefined) {
                if (input.type === 'felt') {
                    (0, minimalistic_assert_1.default)(typeof arg === 'string', "arg " + input.name + " should be a felt (string)");
                    (0, minimalistic_assert_1.default)(isFelt(arg), "arg " + input.name + " should be decimal or hexadecimal");
                }
                else if (typeof arg === 'object' && 'type' in arg) {
                    (0, minimalistic_assert_1.default)(arg.type === 'struct', "arg " + input.name + " should be a struct");
                }
                else {
                    (0, minimalistic_assert_1.default)(Array.isArray(arg), "arg " + input.name + " should be a felt* (string[])");
                    arg.forEach(function (felt, i) {
                        (0, minimalistic_assert_1.default)(typeof felt === 'string', "arg " + input.name + "[" + i + "] should be a felt (string) as part of a felt* (string[])");
                        (0, minimalistic_assert_1.default)(isFelt(felt), "arg " + input.name + "[" + i + "] should be decimal or hexadecimal as part of a felt* (string[])");
                    });
                }
            }
        });
    };
    Contract.prototype.parseResponseField = function (element, responseIterator) {
        var _this = this;
        var entries = [];
        if (['felt', 'felt*'].includes(element.type)) {
            return responseIterator.next().value;
        }
        if (element.type in this.structs) {
            entries = this.structs[element.type].members;
        }
        else if ('outputs' in element) {
            entries = element.outputs;
        }
        return entries.reduce(function (acc, member) {
            var _a;
            return (__assign(__assign({}, acc), (_a = {}, _a[member.name] = _this.parseResponseField(member, responseIterator), _a)));
        }, {});
    };
    Contract.prototype.parseResponse = function (method, response) {
        var methodAbi = this.abi.find(function (abi) { return abi.name === method; });
        var responseIterator = response.flat()[Symbol.iterator]();
        return this.parseResponseField(methodAbi, responseIterator);
    };
    Contract.prototype.invoke = function (method, args, signature) {
        if (args === void 0) { args = {}; }
        // ensure contract is connected
        (0, minimalistic_assert_1.default)(this.connectedTo !== null, 'contract isnt connected to an address');
        // validate method and args
        this.validateMethodAndArgs('INVOKE', method, args);
        // compile calldata
        var entrypointSelector = (0, stark_1.getSelectorFromName)(method);
        var calldata = compileCalldata(args);
        return this.provider.addTransaction({
            type: 'INVOKE_FUNCTION',
            contract_address: this.connectedTo,
            signature: signature,
            calldata: calldata,
            entry_point_selector: entrypointSelector,
        });
    };
    Contract.prototype.call = function (method, args) {
        if (args === void 0) { args = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var entrypointSelector, calldata;
            var _this = this;
            return __generator(this, function (_a) {
                // ensure contract is connected
                (0, minimalistic_assert_1.default)(this.connectedTo !== null, 'contract isnt connected to an address');
                // validate method and args
                this.validateMethodAndArgs('CALL', method, args);
                entrypointSelector = (0, stark_1.getSelectorFromName)(method);
                calldata = compileCalldata(args);
                return [2 /*return*/, this.provider
                        .callContract({
                        contract_address: this.connectedTo,
                        calldata: calldata,
                        entry_point_selector: entrypointSelector,
                    })
                        .then(function (x) { return _this.parseResponse(method, x.result); })];
            });
        });
    };
    return Contract;
}());
exports.Contract = Contract;
