'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
exports.formatSignature =
  exports.makeAddress =
  exports.randomAddress =
  exports.getSelectorFromName =
  exports.compressProgram =
    void 0;
var pako_1 = require('pako');
var ellipticCurve_1 = require('./ellipticCurve');
var encode_1 = require('./encode');
var hash_1 = require('./hash');
var json_1 = require('./json');
var number_1 = require('./number');
/**
 * Function to compress compiled cairo program
 *
 * [Reference](https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/starknet/services/api/gateway/transaction.py#L54-L58)
 * @param jsonProgram - json file representing the compiled cairo program
 * @returns Compressed cairo program
 */
function compressProgram(jsonProgram) {
  var stringified =
    typeof jsonProgram === 'string' ? jsonProgram : (0, json_1.stringify)(jsonProgram);
  var compressedProgram = (0, pako_1.gzip)(stringified);
  return (0, encode_1.btoaUniversal)(compressedProgram);
}
exports.compressProgram = compressProgram;
/**
 * Function to get the hex selector from a given function name
 *
 * [Reference](https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/starknet/public/abi.py#L25-L26)
 * @param funcName - selectors abi function name
 * @returns hex selector of given abi function name
 */
function getSelectorFromName(funcName) {
  // sometimes BigInteger pads the hex string with zeros, which isnt allowed in the starknet api
  return (0, number_1.toHex)((0, hash_1.starknetKeccak)(funcName));
}
exports.getSelectorFromName = getSelectorFromName;
function randomAddress() {
  var randomKeyPair = (0, ellipticCurve_1.genKeyPair)();
  return (0, ellipticCurve_1.getStarkKey)(randomKeyPair);
}
exports.randomAddress = randomAddress;
function makeAddress(input) {
  return (0, encode_1.addHexPrefix)(input).toLowerCase();
}
exports.makeAddress = makeAddress;
function formatSignature(sig) {
  if (!sig) return [];
  try {
    return sig
      .map(function (x) {
        return (0, number_1.toBN)(x);
      })
      .map(function (x) {
        return x.toString();
      });
  } catch (e) {
    return [];
  }
}
exports.formatSignature = formatSignature;
