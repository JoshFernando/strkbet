'use strict';
var __extends =
  (this && this.__extends) ||
  (function () {
    var extendStatics = function (d, b) {
      extendStatics =
        Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array &&
          function (d, b) {
            d.__proto__ = b;
          }) ||
        function (d, b) {
          for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
      return extendStatics(d, b);
    };
    return function (d, b) {
      if (typeof b !== 'function' && b !== null)
        throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
    };
  })();
var __awaiter =
  (this && this.__awaiter) ||
  function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P
        ? value
        : new P(function (resolve) {
            resolve(value);
          });
    }
    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator['throw'](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
var __generator =
  (this && this.__generator) ||
  function (thisArg, body) {
    var _ = {
        label: 0,
        sent: function () {
          if (t[0] & 1) throw t[1];
          return t[1];
        },
        trys: [],
        ops: [],
      },
      f,
      y,
      t,
      g;
    return (
      (g = { next: verb(0), throw: verb(1), return: verb(2) }),
      typeof Symbol === 'function' &&
        (g[Symbol.iterator] = function () {
          return this;
        }),
      g
    );
    function verb(n) {
      return function (v) {
        return step([n, v]);
      };
    }
    function step(op) {
      if (f) throw new TypeError('Generator is already executing.');
      while (_)
        try {
          if (
            ((f = 1),
            y &&
              (t =
                op[0] & 2
                  ? y['return']
                  : op[0]
                  ? y['throw'] || ((t = y['return']) && t.call(y), 0)
                  : y.next) &&
              !(t = t.call(y, op[1])).done)
          )
            return t;
          if (((y = 0), t)) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (
                !((t = _.trys), (t = t.length > 0 && t[t.length - 1])) &&
                (op[0] === 6 || op[0] === 2)
              ) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
      if (op[0] & 5) throw op[1];
      return { value: op[0] ? op[1] : void 0, done: true };
    }
  };
var __read =
  (this && this.__read) ||
  function (o, n) {
    var m = typeof Symbol === 'function' && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o),
      r,
      ar = [],
      e;
    try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    } catch (error) {
      e = { error: error };
    } finally {
      try {
        if (r && !r.done && (m = i['return'])) m.call(i);
      } finally {
        if (e) throw e.error;
      }
    }
    return ar;
  };
var __spreadArray =
  (this && this.__spreadArray) ||
  function (to, from, pack) {
    if (pack || arguments.length === 2)
      for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
        }
      }
    return to.concat(ar || Array.prototype.slice.call(from));
  };
var __importDefault =
  (this && this.__importDefault) ||
  function (mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
Object.defineProperty(exports, '__esModule', { value: true });
exports.Signer = void 0;
var minimalistic_assert_1 = __importDefault(require('minimalistic-assert'));
var contract_1 = require('../contract');
var provider_1 = require('../provider');
var ellipticCurve_1 = require('../utils/ellipticCurve');
var encode_1 = require('../utils/encode');
var hash_1 = require('../utils/hash');
var number_1 = require('../utils/number');
var stark_1 = require('../utils/stark');
var typedData_1 = require('../utils/typedData');
var Signer = /** @class */ (function (_super) {
  __extends(Signer, _super);
  function Signer(provider, address, keyPair) {
    var _this = _super.call(this, provider) || this;
    _this.keyPair = keyPair;
    _this.address = address;
    return _this;
  }
  /**
   * Invoke a function on the starknet contract
   *
   * [Reference](https://github.com/starkware-libs/cairo-lang/blob/f464ec4797361b6be8989e36e02ec690e74ef285/src/starkware/starknet/services/api/gateway/gateway_client.py#L13-L17)
   *
   * @param transaction - transaction to be invoked
   * @returns a confirmation of invoking a function on the starknet contract
   */
  Signer.prototype.addTransaction = function (transaction) {
    return __awaiter(this, void 0, void 0, function () {
      var nonceBn, result, calldataDecimal, msgHash, signature;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            if (transaction.type === 'DEPLOY')
              return [2 /*return*/, _super.prototype.addTransaction.call(this, transaction)];
            (0,
            minimalistic_assert_1.default)(!transaction.signature, "Adding signatures to a signer transaction currently isn't supported");
            if (!transaction.nonce) return [3 /*break*/, 1];
            nonceBn = (0, number_1.toBN)(transaction.nonce);
            return [3 /*break*/, 3];
          case 1:
            return [
              4 /*yield*/,
              this.callContract({
                contract_address: this.address,
                entry_point_selector: (0, stark_1.getSelectorFromName)('get_nonce'),
              }),
            ];
          case 2:
            result = _a.sent().result;
            nonceBn = (0, number_1.toBN)(result[0]);
            _a.label = 3;
          case 3:
            calldataDecimal = (transaction.calldata || []).map(function (x) {
              return (0, number_1.toBN)(x).toString();
            });
            msgHash = (0, encode_1.addHexPrefix)(
              (0, hash_1.hashMessage)(
                this.address,
                transaction.contract_address,
                transaction.entry_point_selector,
                calldataDecimal,
                nonceBn.toString()
              )
            );
            signature = (0, ellipticCurve_1.sign)(this.keyPair, msgHash);
            return [
              2 /*return*/,
              _super.prototype.addTransaction.call(this, {
                type: 'INVOKE_FUNCTION',
                entry_point_selector: (0, stark_1.getSelectorFromName)('execute'),
                calldata: __spreadArray(
                  __spreadArray(
                    [
                      transaction.contract_address,
                      transaction.entry_point_selector,
                      calldataDecimal.length.toString(),
                    ],
                    __read(calldataDecimal),
                    false
                  ),
                  [nonceBn.toString()],
                  false
                ).map(function (x) {
                  return (0, number_1.toBN)(x).toString();
                }),
                contract_address: this.address,
                signature: signature,
              }),
            ];
        }
      });
    });
  };
  /**
   * Sign an JSON object with the starknet private key and return the signature
   *
   * @param json - JSON object to be signed
   * @returns the signature of the JSON object
   * @throws {Error} if the JSON object is not a valid JSON
   */
  Signer.prototype.signMessage = function (typedData) {
    return __awaiter(this, void 0, void 0, function () {
      var _a, _b;
      return __generator(this, function (_c) {
        switch (_c.label) {
          case 0:
            _a = ellipticCurve_1.sign;
            _b = [this.keyPair];
            return [4 /*yield*/, this.hashMessage(typedData)];
          case 1:
            return [2 /*return*/, _a.apply(void 0, _b.concat([_c.sent()]))];
        }
      });
    });
  };
  /**
   * Hash a JSON object with pederson hash and return the hash
   *
   * @param json - JSON object to be hashed
   * @returns the hash of the JSON object
   * @throws {Error} if the JSON object is not a valid JSON
   */
  Signer.prototype.hashMessage = function (typedData) {
    return __awaiter(this, void 0, void 0, function () {
      return __generator(this, function (_a) {
        return [2 /*return*/, (0, typedData_1.getMessageHash)(typedData, this.address)];
      });
    });
  };
  /**
   * Verify a signature of a JSON object
   *
   * @param json - JSON object to be verified
   * @param signature - signature of the JSON object
   * @returns true if the signature is valid, false otherwise
   * @throws {Error} if the JSON object is not a valid JSON or the signature is not a valid signature
   */
  Signer.prototype.verifyMessageHash = function (hash, signature) {
    return __awaiter(this, void 0, void 0, function () {
      var _a;
      return __generator(this, function (_b) {
        switch (_b.label) {
          case 0:
            _b.trys.push([0, 2, , 3]);
            return [
              4 /*yield*/,
              this.callContract({
                contract_address: this.address,
                entry_point_selector: (0, stark_1.getSelectorFromName)('is_valid_signature'),
                calldata: (0, contract_1.compileCalldata)({
                  hash: (0, number_1.toBN)(hash).toString(),
                  signature: signature.map(function (x) {
                    return (0, number_1.toBN)(x).toString();
                  }),
                }),
              }),
            ];
          case 1:
            _b.sent();
            return [2 /*return*/, true];
          case 2:
            _a = _b.sent();
            return [2 /*return*/, false];
          case 3:
            return [2 /*return*/];
        }
      });
    });
  };
  /**
   * Verify a signature of a given hash
   * @warning This method is not recommended, use verifyMessage instead
   *
   * @param hash - hash to be verified
   * @param signature - signature of the hash
   * @returns true if the signature is valid, false otherwise
   * @throws {Error} if the signature is not a valid signature
   */
  Signer.prototype.verifyMessage = function (typedData, signature) {
    return __awaiter(this, void 0, void 0, function () {
      var hash;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4 /*yield*/, this.hashMessage(typedData)];
          case 1:
            hash = _a.sent();
            return [2 /*return*/, this.verifyMessageHash(hash, signature)];
        }
      });
    });
  };
  return Signer;
})(provider_1.Provider);
exports.Signer = Signer;
