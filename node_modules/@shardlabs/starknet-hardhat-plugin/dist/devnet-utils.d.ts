import { Devnet, HardhatRuntimeEnvironment } from "hardhat/types";
interface L1Message {
    address: string;
    args: {
        from_address: string;
        nonce: number;
        payload: Array<number>;
        selector: string;
        to_address: string;
    };
    blockHash: string;
    blockNumber: number;
    event: string;
    logIndex: number;
    transactionHash: string;
    transactionIndex: number;
}
interface L2Message {
    from_address: string;
    to_address: string;
    payload: Array<string>;
}
export interface FlushResponse {
    l1_provider: string;
    consumed_messages: {
        from_l1: Array<L1Message>;
        from_l2: Array<L2Message>;
    };
}
export interface LoadL1MessagingContractResponse {
    address: string;
    l1_provider: string;
}
export declare class DevnetUtils implements Devnet {
    private hre;
    constructor(hre: HardhatRuntimeEnvironment);
    private get endpoint();
    private handleError;
    flush(): Promise<FlushResponse>;
    loadL1MessagingContract(networkUrl: string, address?: string, networkId?: string): Promise<LoadL1MessagingContractResponse>;
}
export {};
