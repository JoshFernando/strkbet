"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleAccountContractArtifacts = exports.sign = exports.generateRandomStarkPrivateKey = void 0;
const starknet_1 = require("starknet");
const number_1 = require("starknet/utils/number");
const ellipticCurve = __importStar(require("starknet/utils/ellipticCurve"));
const fs = __importStar(require("fs"));
const path_1 = __importDefault(require("path"));
const constants_1 = require("./constants");
const axios_1 = __importDefault(require("axios"));
/*
 * Helper cryptography functions for Key generation and message signing
 */
function generateRandomStarkPrivateKey(length = 63) {
    const characters = "0123456789ABCDEF";
    let result = "";
    for (let i = 0; i < length; ++i) {
        result += characters.charAt(Math.floor(Math.random() * characters.length));
    }
    return (0, number_1.toBN)(result, "hex");
}
exports.generateRandomStarkPrivateKey = generateRandomStarkPrivateKey;
/**
 * Returns a signature which is the result of signing a message
 *
 * @param keyPair
 * @param accountAddress
 * @param nonce
 * @param functionSelector
 * @param toAddress
 * @param calldata
 * @returns the signature
 */
function sign(keyPair, accountAddress, nonce, functionSelector, toAddress, calldata) {
    const msgHash = starknet_1.hash.computeHashOnElements([
        (0, number_1.toBN)(accountAddress.substring(2), "hex"),
        (0, number_1.toBN)(toAddress.substring(2), "hex"),
        functionSelector,
        (0, number_1.toBN)(starknet_1.hash.computeHashOnElements(calldata).substring(2), "hex"),
        nonce
    ]);
    const signedMessage = ellipticCurve.sign(keyPair, BigInt(msgHash).toString(16));
    const signature = [
        BigInt("0x" + signedMessage[0].toString(16)),
        BigInt("0x" + signedMessage[1].toString(16))
    ];
    return signature;
}
exports.sign = sign;
function handleAccountContractArtifacts(accountType, artifactsName, hre) {
    return __awaiter(this, void 0, void 0, function* () {
        // Name of the artifacts' parent folder
        const artifactsBase = artifactsName + ".cairo";
        const baseArtifactsPath = path_1.default.join(hre.config.paths.starknetArtifacts, constants_1.ACCOUNT_CONTRACT_ARTIFACTS_ROOT_PATH);
        // Remove old versions from the path
        if (fs.existsSync(baseArtifactsPath)) {
            const contents = fs.readdirSync(baseArtifactsPath);
            contents
                .filter((content) => content !== constants_1.ACCOUNT_ARTIFACTS_VERSION)
                .forEach((content) => {
                fs.rmSync(path_1.default.join(baseArtifactsPath, content), {
                    recursive: true,
                    force: true
                });
            });
        }
        // Full path to where the artifacts will be saved
        const artifactsTargetPath = path_1.default.join(baseArtifactsPath, constants_1.ACCOUNT_ARTIFACTS_VERSION, artifactsBase);
        const jsonArtifact = artifactsName + ".json";
        const abiArtifact = artifactsName + constants_1.ABI_SUFFIX;
        const artifactLocationUrl = constants_1.GITHUB_ACCOUNT_ARTIFACTS_URL.concat(accountType, "/", artifactsBase, "/");
        yield assertArtifact(jsonArtifact, artifactsTargetPath, artifactLocationUrl);
        yield assertArtifact(abiArtifact, artifactsTargetPath, artifactLocationUrl);
        return artifactsTargetPath;
    });
}
exports.handleAccountContractArtifacts = handleAccountContractArtifacts;
/**
 * Checks if the provided artifact exists in the project's artifacts folder.
 * If it doesen't, downloads it from the GitHub repository "https://github.com/Shard-Labs/starknet-hardhat-example"
 * @param artifact artifact file to download. E.g. "Account.json" or "Account_abi.json"
 * @param artifactsTargetPath folder to where the artifacts will be downloaded. E.g. "project/starknet-artifacts/Account.cairo"
 * @param artifactLocationUrl url to the github folder where the artifacts are stored
 */
function assertArtifact(artifact, artifactsTargetPath, artifactLocationUrl) {
    return __awaiter(this, void 0, void 0, function* () {
        // Download artifact if it doesen't exist
        if (!fs.existsSync(path_1.default.join(artifactsTargetPath, artifact))) {
            fs.mkdirSync(artifactsTargetPath, { recursive: true });
            const rawFileURL = artifactLocationUrl.concat(artifact);
            const response = yield axios_1.default.get(rawFileURL, {
                transformResponse: (res) => {
                    return res;
                },
                responseType: "json"
            });
            fs.writeFileSync(path_1.default.join(artifactsTargetPath, artifact), response.data);
        }
    });
}
//# sourceMappingURL=account-utils.js.map