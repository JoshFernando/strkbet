import { InvokeResponse, StarknetContract, StringMap } from "./types";
import { HardhatRuntimeEnvironment } from "hardhat/types";
import { ec } from "elliptic";
/**
 * Representation of an Account.
 * Multiple implementations can exist, each will be defined by an extension of this Abstract class
 */
export declare abstract class Account {
    starknetContract: StarknetContract;
    privateKey: string;
    publicKey: string;
    keyPair: ec.KeyPair;
    protected constructor(starknetContract: StarknetContract, privateKey: string, publicKey: string, keyPair: ec.KeyPair);
    /**
     * Uses the account contract as a proxy to invoke a function on the target contract with a signature
     *
     * @param toContract target contract to be called
     * @param functionName function in the contract to be called
     * @param calldata calldata to use as input for the contract call
     */
    abstract invoke(toContract: StarknetContract, functionName: string, calldata?: StringMap): Promise<InvokeResponse>;
    /**
     * Uses the account contract as a proxy to call a function on the target contract with a signature
     *
     * @param toContract target contract to be called
     * @param functionName function in the contract to be called
     * @param calldata calldata to use as input for the contract call
     */
    abstract call(toContract: StarknetContract, functionName: string, calldata?: StringMap): Promise<StringMap>;
}
/**
 * Wrapper for the OpenZeppelin implementation of an Account
 */
export declare class OpenZeppelinAccount extends Account {
    static readonly EXECUTION_FUNCTION_NAME = "execute";
    static readonly ACCOUNT_TYPE_NAME = "OpenZeppelinAccount";
    static readonly ACCOUNT_ARTIFACTS_NAME = "Account";
    constructor(starknetContract: StarknetContract, privateKey: string, publicKey: string, keyPair: ec.KeyPair);
    /**
     * Invoke a function of a contract through this account.
     * @param toContract the contract being being invoked
     * @param functionName the name of the function to invoke
     * @param calldata the calldata to be passed to the function
     */
    invoke(toContract: StarknetContract, functionName: string, calldata?: StringMap): Promise<InvokeResponse>;
    /**
     * Call a function of a contract through this account.
     * @param toContract the contract being being called
     * @param functionName the name of the function to call
     * @param calldata the calldata to be passed to the function
     */
    call(toContract: StarknetContract, functionName: string, calldata?: StringMap): Promise<StringMap>;
    private invokeOrCall;
    static deployFromABI(hre: HardhatRuntimeEnvironment): Promise<Account>;
    static getAccountFromAddress(address: string, privateKey: string, hre: HardhatRuntimeEnvironment): Promise<Account>;
}
