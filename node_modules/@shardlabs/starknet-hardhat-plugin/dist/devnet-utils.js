"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DevnetUtils = void 0;
const axios_1 = __importDefault(require("axios"));
const plugins_1 = require("hardhat/plugins");
const constants_1 = require("./constants");
class DevnetUtils {
    constructor(hre) {
        this.hre = hre;
    }
    get endpoint() {
        return `${this.hre.config.starknet.networkUrl}/postman`;
    }
    handleError(error) {
        const parent = error instanceof Error && error;
        throw new plugins_1.HardhatPluginError(constants_1.PLUGIN_NAME, "Request failed. Make sure your network has the /postman endpoint", parent);
    }
    flush() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield axios_1.default.post(`${this.endpoint}/flush`);
                return response.data;
            }
            catch (error) {
                this.handleError(error);
            }
        });
    }
    loadL1MessagingContract(networkUrl, address, networkId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield axios_1.default.post(`${this.endpoint}/load_l1_messaging_contract`, {
                    networkId,
                    address,
                    networkUrl
                });
                return response.data;
            }
            catch (error) {
                this.handleError(error);
            }
        });
    }
}
exports.DevnetUtils = DevnetUtils;
//# sourceMappingURL=devnet-utils.js.map